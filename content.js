/**
 * @file content.js
 * This script finds and removes HTML elements with the class 'Card_gdsCard__Zg7Pe'
 * on app.graphite.dev if they contain a specific "Autogenerated" pill.
 * It communicates with the background script to respect a temporary flag
 * for disabling hiding for a single page load.
 */

// Flag to indicate if hiding is disabled for the current page load.
// This will be set based on the response from the background script.
let isHidingDisabledForThisLoad = false;

/**
 * Main function to initialize the extension's content script logic.
 * It requests the temporary disable flag status from the background script,
 * then proceeds to remove cards and set up the MutationObserver based on the flag.
 */
function init() {
  // Send a message to the background script to get the status of the temporary disable flag.
  chrome.runtime.sendMessage({ type: "GET_TEMP_DISABLE_FLAG" }, (response) => {
    if (chrome.runtime.lastError) {
      // Handle errors in communication (e.g., background script not ready).
      console.error(
        "[Hide autogenerated files] Error communicating with background script:",
        chrome.runtime.lastError.message,
      );
      // Default to hiding enabled if communication fails.
      isHidingDisabledForThisLoad = false;
    } else if (response && response.error) {
      // Handle errors reported by the background script (e.g., storage access error).
      console.error(
        "[Hide autogenerated files] Background script reported an error:",
        response.error,
      );
      isHidingDisabledForThisLoad = false;
    } else if (response && typeof response.isDisabled === "boolean") {
      // Successfully received the flag status from the background script.
      isHidingDisabledForThisLoad = response.isDisabled;
      if (isHidingDisabledForThisLoad) {
        console.log(
          "[Hide autogenerated files] Autogenerated card hiding is temporarily disabled for this page load (flag from background).",
        );
      } else {
        console.log(
          "[Hide autogenerated files] Autogenerated card hiding is enabled for this page load (flag from background).",
        );
      }
    } else {
      // Fallback for unexpected response.
      console.warn(
        "[Hide autogenerated files] No response or unexpected response from background script for flag check. Assuming hiding enabled.",
      );
      isHidingDisabledForThisLoad = false;
    }

    // Perform initial card removal only if hiding is NOT disabled.
    if (!isHidingDisabledForThisLoad) {
      removeAutogeneratedCards();
    }

    // Start observing for dynamic DOM changes.
    // The observer itself will also check 'isHidingDisabledForThisLoad' before acting.
    observeDOMChanges();
  });
}

/**
 * Finds and removes elements that match the specified criteria,
 * unless hiding is temporarily disabled for this page load.
 */
function removeAutogeneratedCards() {
  // If hiding is disabled for this specific page load, do nothing.
  if (isHidingDisabledForThisLoad) {
    // console.log('[Hide autogenerated files] Skipping card removal because hiding is temporarily disabled for this load.');
    return;
  }

  const cardClassName = "Card_gdsCard__Zg7Pe";
  const autogeneratedPillSelector = 'div[data-kind="caution"]';
  const autogeneratedPillText = "Autogenerated";

  const cards = document.querySelectorAll(`.${cardClassName}`);
  // console.log(`[Hide autogenerated files] Found ${cards.length} elements with class ${cardClassName}. Checking for autogen pill.`);

  cards.forEach((card) => {
    const pill = card.querySelector(autogeneratedPillSelector);
    if (
      pill &&
      pill.textContent &&
      pill.textContent.trim() === autogeneratedPillText
    ) {
      card.remove();
      console.log(
        '[Hide autogenerated files] Removed a card containing an "Autogenerated" pill:',
        card,
      );
    }
  });
}

/**
 * Observes the DOM for changes and calls removeAutogeneratedCards if new nodes are added,
 * but only if hiding is not temporarily disabled.
 */
function observeDOMChanges() {
  const observer = new MutationObserver((mutationsList, observer) => {
    // If hiding is disabled for this load, the observer should not trigger removals.
    if (isHidingDisabledForThisLoad) {
      return;
    }

    let needsScan = false;
    for (const mutation of mutationsList) {
      if (mutation.type === "childList" && mutation.addedNodes.length > 0) {
        needsScan = true;
        break;
      }
    }

    if (needsScan) {
      // console.log('[Hide autogenerated files] DOM changed, re-scanning for autogenerated cards.');
      removeAutogeneratedCards();
    }
  });

  observer.observe(document.body, { childList: true, subtree: true });
  // console.log('[Hide autogenerated files] MutationObserver started to watch for dynamic content.');
}

// Start the initialization process for the content script.
init();
