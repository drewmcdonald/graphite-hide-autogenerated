/**
 * @file background.js
 * This service worker handles requests from content scripts that require access
 * to APIs not available in the content script context, like chrome.storage.session.
 */

// Listener for messages from other parts of the extension (e.g., content scripts).
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  // Check if the message is a request to get the temporary disable flag.
  if (request.type === "GET_TEMP_DISABLE_FLAG") {
    // Access chrome.storage.session to get the flag.
    chrome.storage.session.get(
      ["hideAutogeneratedTemporarilyDisabled"],
      (result) => {
        if (chrome.runtime.lastError) {
          // Log and send back an error if storage access fails.
          console.error(
            "[Hide autogenerated files BG] Error getting flag from session storage:",
            chrome.runtime.lastError.message,
          );
          sendResponse({
            error: chrome.runtime.lastError.message,
            isDisabled: false,
          });
          return;
        }

        // Determine if hiding is disabled. Default to false if the flag isn't set.
        const isDisabled = result.hideAutogeneratedTemporarilyDisabled || false;
        // Send the status of the flag back to the content script.
        sendResponse({ isDisabled: isDisabled });

        // If the flag was true (meaning it was set by the popup for a reload),
        // clear it now. This ensures the "disable once" behavior.
        if (isDisabled) {
          chrome.storage.session.remove(
            "hideAutogeneratedTemporarilyDisabled",
            () => {
              if (chrome.runtime.lastError) {
                console.error(
                  "[Hide autogenerated files BG] Error clearing temporary disable flag:",
                  chrome.runtime.lastError.message,
                );
              } else {
                console.log(
                  "[Hide autogenerated files BG] Temporary disable flag cleared from session storage.",
                );
              }
            },
          );
        }
      },
    );
    // Return true to indicate that sendResponse will be called asynchronously.
    return true;
  }
  // If the message type is not recognized, do nothing.
  // Consider adding 'return false;' or 'return undefined;' if not handling other message types.
});

// Optional: Log when the background script is loaded/reloaded (for debugging).
console.log("[Hide autogenerated files BG] Background service worker started.");
